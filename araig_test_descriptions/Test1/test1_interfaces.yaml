Interfaces:
  External:
  # Data exchange with external sources such as robots, sensors, nav stack etc...
  # Just enter the names of the topics published by these devices here, and they will be used further in the test
  # This effectively serves as remapping through the auto-generation toolchain
    Data:
    # Robot
      - name: Data.robot.odom
        topic: "/turtlebot3/odometry"
        type: nav_msgs/Odometry
        description: "Published by the robot driver, gives the robot's pose and velocity."
      - name: Data.robot.odom.twist.x
        topic: "/turtlebot3/odometry/twist/x"
        type: std_msgs/Float64
        description: "Specifically, the twist x value of odom"
      - name: Data.robot.odom.pose.x
        topic: "/turtlebot3/odometry/pose/x"
        type: std_msgs/Float64
        description: "Specifically, the pose x value of odom"

    # Sensors
      - name: Data.sensors.ips.location
        topic: "/marvelmind/beacon_pos"
        type: geometry_msgs/PoseStamped
        description: "Data arriving from the Indoor Positioning System (IPA) about the location of beacon. This should be passed to the location interpreter"
      - name: Data.sensors.camera
        topic: "/realsense/rgb"
        type: sensor_msgs/Image
        description: "RGB images published by the realsense camera"

    # Interpreters
      - name: Data.interpreter.vel
        topic: "/turtlebot3/cmd_vel"
        type: geometry_msgs/Twist
        description: "The topic of the robot's cmd_vel to which the command interpreter has to publish"

  Internal:
    Data:
      # Interpreters
      - name: Data.interpreter.location.robot
        topic: "/data/interpreter/location/robot"
        type: geometry_msgs/PoseStamped
        description: "The sensor data is interpreted and the pose of the robot is published on this topic"
      - name: Data.interpreter.location.robot.x
        topic: "/data/interpreter/location/robot/pose/position/x"
        type: geometry_msgs/PoseStamped
        description: "Specifically the X coordinate of the robot's pose"

      # Calculators
      - name: Data.calc.braking_time
        topic: "/data/calculators/braking_time/duration"
        type: std_msgs/Double
        description: "Time taken by the robot to stop after the stop signal has been given. i.e. Braking Time"
      - name: Data.calc.braking_distance
        topic: "/data/calculators/braking_distance/distance"
        type: std_msgs/Double
        description: "Distance traversed by the robot after the stop signal is given before it halts completely. i.e. Braking Distance"

    Signals:
      # Calculators
      - name: Signal.calc.robot_has_stopped
        topic: "/signals/calculators/robot_has_stopped/has_stopped"
        type: std_msgs/Bool
        description: "An signal raised when robot reaches velocity 0"
      - name: Signal.calc.robot_has_max_vel
        topic: "/signals/calculators/robot_has_max_vel/has_max"
        type: std_msgs/Bool
        description: "An signal raised when robot reaches its max velocity"

      # Runner
      - name: Signal.runner.stop_robot
        topic: "/signal/runner/stop_robot/stop"
        type: std_msgs/Bool
        description: "Signal raised by runner to stop the robot. Consumed by command interpreter."
      - name: Signal.runner.start_robot
        topic: "/signal/runner/start_robot/start"
        type: std_msgs/Bool
        description: "Signal raised by runner to start the robot. Consumed by command interpreter."

      # UI
      - name: Signal.ui.start_test
        topic: "/signal/ui/start_test/start"
        type: std_msgs/Bool
        description: "Signal raised by UI to start the test script. Consumed by runner"
      - name: Signal.ui.abort_test
        topic: "/signal/ui/abort_test/abort"
        type: std_msgs/Bool
        description: "Signal raised by UI to abort the test script. Consumed by runner"

